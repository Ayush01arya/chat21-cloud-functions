/**
  * @Version 0.4.3: 
  * - progettato template email
  */

  'use strict';
  
  var functions = require('firebase-functions');
  var admin = require('firebase-admin');
  
  
  
  //admin.initializeApp(functions.config().firebase);  
  
    
  // invio di una singola notifica push ad un utente (direct)
 // exports.sendNotification = functions.database.ref('/apps/{app_id}/users/{sender_id}/messages/{recipient_id}/{message_id}').onCreate(event => {
function sendNotification(app_id, sender_id, recipient_id, message_id, message) {
        // const message_id = event.params.message_id;
        // const sender_id = event.params.sender_id; 
        // const recipient_id = event.params.recipient_id;
        // const app_id = event.params.app_id;
        // const message = event.data.current.val();

        console.log("sender_id: "+ sender_id + ", recipient_id : " + recipient_id + ", app_id: " + app_id + ", message_id: " + message_id);
       
        console.log('message ' + JSON.stringify(message));
    
    
        // se esiste il parametro "recipientGroupId" allora si Ã¨ in presenza di un gruppo
        // la funzione termina se si tenta di mandare la notifica ad un gruppo
        if (message.is_group==1) { //is a group message
            return 0;
        }

        console.log("message.status : " + message.status);     
        if (message.status != 150){
            return 0;
        }
        
        const promises = [];
    
        if (sender_id == recipient_id) {
        console.log('not send push notification for the same user');
        //if sender is receiver, don't send notification
        return 0;
        }
    
        const text = message.text;
        const messageTimestamp = JSON.stringify(message.timestamp);
        
        
        const getInstanceIdPromise = admin.database().ref(`/apps/${app_id}/users/${recipient_id}/instanceId`).once('value');
        const getSenderUidPromise = admin.auth().getUser(sender_id);
    
        return Promise.all([getInstanceIdPromise, getSenderUidPromise]).then(results => {
        const instanceId = results[0].val(); // risultato di getInstanceIdPromise
        const sender = results[1];  // risutalto di getSenderUidPromise
    
        console.log('instanceId ' + instanceId);
        console.log('sender ' + sender);
        
        
        //https://firebase.google.com/docs/cloud-messaging/concept-options#notifications_and_data_messages
        const payload = {
            notification: {
            title: senderFullname,
            body: text,
            icon : "ic_notification_small",
            sound : "default",
            click_action: "OPEN_MESSAGE_LIST_ACTIVITY", // for intent filter in your activity
            badge : "1"
            },
    
            data: {
            recipient: recipient_id,
            sender: sender_id,
            sender_fullname: senderFullname,     
            text: text,
            timestamp : messageTimestamp
            }
        };
        
        admin.messaging().sendToDevice(instanceId, payload)
        .then(function (response) {
            console.log("Successfully sent message:", response);
            console.log("Successfully sent message: stringifiedresponse: ", JSON.stringify(response));
            console.log("Successfully sent message.results[0]:", response.results[0]);
        })
        .catch(function (error) {
            console.log("Error sending message:", error);
        });
        });
}
//   });
  
  
  
  // invio di una notifica push a piÃ¹ utenti (one to more)
  exports.sendNotificationToGroup = functions.database.ref('/apps/{tenantId}/messages/{conversationId}/{pushId}').onWrite(event => {
    // Only notify when it is first created.
    if (event.data.previous.exists()) {
      return;
    }
  
    // Exit when the data is deleted.
    if (!event.data.exists()) {
      return;
    }
  
    const conversationId = event.params.conversationId;
    console.log("conversationId : " + conversationId);
  
    const tenant = event.params.tenantId;
    console.log("tenant : " + tenant);
  
    const message = event.data.current.val();
    //console.log('message ' + message );
    const senderUid = message.sender;
    const senderFullname = message.sender_fullname;
    const receiverUid = message.recipient;
  
    const recipientGroupId = message.recipientGroupId;
    console.log("recipientGroupId : " + recipientGroupId);
  
    // se esiste il parametro "recipientGroupId" allora si Ã¨ in presenza di un gruppo
    if(recipientGroupId === undefined || recipientGroupId === null) {
      console.log("recipientGroupId is undefined or null");
      return;
    }
  
    const text = message.text;
  
    const messageTimestamp = JSON.stringify(message.timestamp);
  
    const promises = [];
  
    const getInstanceIdPromise = admin.database().ref(`/apps/${tenant}/groups/${recipientGroupId}/members`).once('value', function(snapshot) {
      var userInstanceIdPromises = [];
  
      snapshot.forEach(function(childSnapshot) {
        // la mappa degli utenti Ã¨ nel formato Map<String, Integer>
        // es. <test.monitoraggio, 1>
        // dove: 
        // String: Ã¨ il nome utente
        // Integer: Ã¨ un valore di default utilizzato per poter create la mappa (scelta progettuale dettata dalle limitazioni di firebase)
        var userId = childSnapshot.key; // corrisponde allo userId dell'utente
        console.log("userId: " + userId); 
  
        if(userId !== senderUid) {
          // const tenant = "bppintranet";
          // const reiceverFirebaseAuthUsername = userId;
          // console.log("reiceverFirebaseAuthUsername " + reiceverFirebaseAuthUsername);
  
          // const userInstanceIdPromise = admin.database().ref(`/tenantUsers/${reiceverFirebaseAuthUsername}/instanceId`).once('value');
          const userInstanceIdPromise = admin.database().ref(`/apps/${tenant}/users/${userId}/instanceId`).once('value');
          // console.log("userInstanceId: " + userInstanceId);
          // userInstanceIdPromises.push(userInstanceId);
  
          userInstanceIdPromises.push(userInstanceIdPromise);
        }
      });
  
      // console.log("userInstanceIdPromises: " + userInstanceIdPromises);
      // return userInstanceIdPromises;
  
      // console.log("promises-stringify: " + JSON.stringify(userInstanceIdPromises));
      console.log("promises: " + userInstanceIdPromises);
  
      Promise.all(userInstanceIdPromises).then(results => {
        console.log("results: " + results);
  
        var instances = [];
  
        results.forEach(function(instance) {
          // var usersId = instance.key; // corrisponde allo userId dell'utente
          var instanceid = instance.val(); // corrisponde al valore di defautl dell'utente
          console.log("instanceid: " + instanceid);
  
          if(instanceid !== null && instanceid !== undefined)
            instances.push(instanceid);
          });
  
          const nodeGroupRef = admin.database().ref(`/apps/${tenant}/groups/${recipientGroupId}`).once('value', function(snapshot) {
            console.log("nodeGroupRef-> snapshotKey: " + snapshot.key + ", snapshotVal: " + snapshot.val());
  
            var groupName = snapshot.val().name;
  
            //https://firebase.google.com/docs/cloud-messaging/concept-options#notifications_and_data_messages
            const payload = {
              notification: {
                title: groupName,
                body: senderFullname + ": "+ text,
                icon : "ic_notification_small",
                sound : "default",
                click_action: "OPEN_MESSAGE_LIST_ACTIVITY", // for intent filter in your activity
                // badge : badgeCount.toString()
                badge : "1"
              },
  
              data: {
                group_id: recipientGroupId,
                group_name: groupName,
                sender: senderUid,
                sender_fullname: senderFullname,     
                text: text,
                timestamp : messageTimestamp
              }
            };
  
            badgeCount++; //or whatever
  
            sendWelcomeEmail(senderUid,groupName, text, tenant, messageTimestamp);
  
            console.log("payload: " + payload);
  
            admin.messaging().sendToDevice(instances, payload)
              .then(function (response) {
                console.log("Successfully sent message:", response);
                console.log("Successfully sent message: stringifiedresponse: ", JSON.stringify(response));
                console.log("Successfully sent message.results[0]:", response.results[0]);
              })
              .catch(function (error) {
                console.log("Error sending message:", error);
              });
            });
        });
      });
  });